schema {
  query: query_root
  mutation: mutation_root
  subscription: subscription_root
}

"""whether this query should be cached (Hasura Cloud only)"""
directive @cached(
  """refresh the cache entry"""
  refresh: Boolean! = false

  """measured in seconds"""
  ttl: Int! = 60
) on QUERY

"""
columns and relationships of "Contents"
"""
type Contents {
  content: String
  content_json(
    """JSON select path"""
    path: String
  ): json
  createdAt: timestamptz
  extras(
    """JSON select path"""
    path: String
  ): json
  id: Int!
  main_category: String
  owner: Int
  parent: String
  parent_type: String
  taxonomy(
    """JSON select path"""
    path: String
  ): json
  title: String
  type: String
  updatedAt: timestamptz
}

"""
Boolean expression to filter rows from the table "Contents". All fields are combined with a logical 'AND'.
"""
input Contents_bool_exp {
  _and: [Contents_bool_exp!]
  _not: Contents_bool_exp
  _or: [Contents_bool_exp!]
  content: String_comparison_exp
  content_json: json_comparison_exp
  createdAt: timestamptz_comparison_exp
  extras: json_comparison_exp
  id: Int_comparison_exp
  main_category: String_comparison_exp
  owner: Int_comparison_exp
  parent: String_comparison_exp
  parent_type: String_comparison_exp
  taxonomy: json_comparison_exp
  title: String_comparison_exp
  type: String_comparison_exp
  updatedAt: timestamptz_comparison_exp
}

"""
input type for incrementing numeric columns in table "Contents"
"""
input Contents_inc_input {
  id: Int
  owner: Int
}

"""
input type for inserting data into table "Contents"
"""
input Contents_insert_input {
  content: String
  content_json: json
  createdAt: timestamptz
  extras: json
  id: Int
  main_category: String
  owner: Int
  parent: String
  parent_type: String
  taxonomy: json
  title: String
  type: String
  updatedAt: timestamptz
}

"""
response of any mutation on the table "Contents"
"""
type Contents_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [Contents!]!
}

"""
input type for inserting object relation for remote table "Contents"
"""
input Contents_obj_rel_insert_input {
  data: Contents_insert_input!
}

"""Ordering options when selecting data from "Contents"."""
input Contents_order_by {
  content: order_by
  content_json: order_by
  createdAt: order_by
  extras: order_by
  id: order_by
  main_category: order_by
  owner: order_by
  parent: order_by
  parent_type: order_by
  taxonomy: order_by
  title: order_by
  type: order_by
  updatedAt: order_by
}

"""
select columns of table "Contents"
"""
enum Contents_select_column {
  """column name"""
  content

  """column name"""
  content_json

  """column name"""
  createdAt

  """column name"""
  extras

  """column name"""
  id

  """column name"""
  main_category

  """column name"""
  owner

  """column name"""
  parent

  """column name"""
  parent_type

  """column name"""
  taxonomy

  """column name"""
  title

  """column name"""
  type

  """column name"""
  updatedAt
}

"""
input type for updating data in table "Contents"
"""
input Contents_set_input {
  content: String
  content_json: json
  createdAt: timestamptz
  extras: json
  id: Int
  main_category: String
  owner: Int
  parent: String
  parent_type: String
  taxonomy: json
  title: String
  type: String
  updatedAt: timestamptz
}

"""
Streaming cursor of the table "Contents"
"""
input Contents_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: Contents_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input Contents_stream_cursor_value_input {
  content: String
  content_json: json
  createdAt: timestamptz
  extras: json
  id: Int
  main_category: String
  owner: Int
  parent: String
  parent_type: String
  taxonomy: json
  title: String
  type: String
  updatedAt: timestamptz
}

input Contents_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: Contents_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: Contents_set_input

  """filter the rows which have to be updated"""
  where: Contents_bool_exp!
}

"""
columns and relationships of "CrossBindings"
"""
type CrossBindings {
  """An object relationship"""
  bindB: Contents
  contentID: Int!
  createdAt: timestamp!
  extra: String
  id: Int!
  type: String!
  userID: Int!
}

"""
Boolean expression to filter rows from the table "CrossBindings". All fields are combined with a logical 'AND'.
"""
input CrossBindings_bool_exp {
  _and: [CrossBindings_bool_exp!]
  _not: CrossBindings_bool_exp
  _or: [CrossBindings_bool_exp!]
  bindB: Contents_bool_exp
  contentID: Int_comparison_exp
  createdAt: timestamp_comparison_exp
  extra: String_comparison_exp
  id: Int_comparison_exp
  type: String_comparison_exp
  userID: Int_comparison_exp
}

"""
input type for incrementing numeric columns in table "CrossBindings"
"""
input CrossBindings_inc_input {
  contentID: Int
  id: Int
  userID: Int
}

"""
input type for inserting data into table "CrossBindings"
"""
input CrossBindings_insert_input {
  bindB: Contents_obj_rel_insert_input
  contentID: Int
  createdAt: timestamp
  extra: String
  id: Int
  type: String
  userID: Int
}

"""
response of any mutation on the table "CrossBindings"
"""
type CrossBindings_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [CrossBindings!]!
}

"""
input type for inserting object relation for remote table "CrossBindings"
"""
input CrossBindings_obj_rel_insert_input {
  data: CrossBindings_insert_input!
}

"""Ordering options when selecting data from "CrossBindings"."""
input CrossBindings_order_by {
  bindB: Contents_order_by
  contentID: order_by
  createdAt: order_by
  extra: order_by
  id: order_by
  type: order_by
  userID: order_by
}

"""
select columns of table "CrossBindings"
"""
enum CrossBindings_select_column {
  """column name"""
  contentID

  """column name"""
  createdAt

  """column name"""
  extra

  """column name"""
  id

  """column name"""
  type

  """column name"""
  userID
}

"""
input type for updating data in table "CrossBindings"
"""
input CrossBindings_set_input {
  contentID: Int
  createdAt: timestamp
  extra: String
  id: Int
  type: String
  userID: Int
}

"""
Streaming cursor of the table "CrossBindings"
"""
input CrossBindings_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: CrossBindings_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input CrossBindings_stream_cursor_value_input {
  contentID: Int
  createdAt: timestamp
  extra: String
  id: Int
  type: String
  userID: Int
}

input CrossBindings_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: CrossBindings_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: CrossBindings_set_input

  """filter the rows which have to be updated"""
  where: CrossBindings_bool_exp!
}

"""
Boolean expression to compare columns of type "Int". All fields are combined with logical 'AND'.
"""
input Int_comparison_exp {
  _eq: Int
  _gt: Int
  _gte: Int
  _in: [Int!]
  _is_null: Boolean
  _lt: Int
  _lte: Int
  _neq: Int
  _nin: [Int!]
}

"""
Boolean expression to compare columns of type "String". All fields are combined with logical 'AND'.
"""
input String_comparison_exp {
  _eq: String
  _gt: String
  _gte: String

  """does the column match the given case-insensitive pattern"""
  _ilike: String
  _in: [String!]

  """
  does the column match the given POSIX regular expression, case insensitive
  """
  _iregex: String
  _is_null: Boolean

  """does the column match the given pattern"""
  _like: String
  _lt: String
  _lte: String
  _neq: String

  """does the column NOT match the given case-insensitive pattern"""
  _nilike: String
  _nin: [String!]

  """
  does the column NOT match the given POSIX regular expression, case insensitive
  """
  _niregex: String

  """does the column NOT match the given pattern"""
  _nlike: String

  """
  does the column NOT match the given POSIX regular expression, case sensitive
  """
  _nregex: String

  """does the column NOT match the given SQL regular expression"""
  _nsimilar: String

  """
  does the column match the given POSIX regular expression, case sensitive
  """
  _regex: String

  """does the column match the given SQL regular expression"""
  _similar: String
}

"""
columns and relationships of "Users"
"""
type Users {
  avatar: String
  bga_id: String
  bgg_id: String

  """An object relationship"""
  binderA: CrossBindings
  birthday: timestamptz
  createdAt: timestamptz!
  email: String!
  firstName: String
  id: Int!
  lastName: String
  password: String!
  updatedAt: timestamptz!
  userName: String!
  wallet: String
}

"""
Boolean expression to filter rows from the table "Users". All fields are combined with a logical 'AND'.
"""
input Users_bool_exp {
  _and: [Users_bool_exp!]
  _not: Users_bool_exp
  _or: [Users_bool_exp!]
  avatar: String_comparison_exp
  bga_id: String_comparison_exp
  bgg_id: String_comparison_exp
  binderA: CrossBindings_bool_exp
  birthday: timestamptz_comparison_exp
  createdAt: timestamptz_comparison_exp
  email: String_comparison_exp
  firstName: String_comparison_exp
  id: Int_comparison_exp
  lastName: String_comparison_exp
  password: String_comparison_exp
  updatedAt: timestamptz_comparison_exp
  userName: String_comparison_exp
  wallet: String_comparison_exp
}

"""
input type for incrementing numeric columns in table "Users"
"""
input Users_inc_input {
  id: Int
}

"""
input type for inserting data into table "Users"
"""
input Users_insert_input {
  avatar: String
  bga_id: String
  bgg_id: String
  binderA: CrossBindings_obj_rel_insert_input
  birthday: timestamptz
  createdAt: timestamptz
  email: String
  firstName: String
  id: Int
  lastName: String
  password: String
  updatedAt: timestamptz
  userName: String
  wallet: String
}

"""
response of any mutation on the table "Users"
"""
type Users_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [Users!]!
}

"""Ordering options when selecting data from "Users"."""
input Users_order_by {
  avatar: order_by
  bga_id: order_by
  bgg_id: order_by
  binderA: CrossBindings_order_by
  birthday: order_by
  createdAt: order_by
  email: order_by
  firstName: order_by
  id: order_by
  lastName: order_by
  password: order_by
  updatedAt: order_by
  userName: order_by
  wallet: order_by
}

"""
select columns of table "Users"
"""
enum Users_select_column {
  """column name"""
  avatar

  """column name"""
  bga_id

  """column name"""
  bgg_id

  """column name"""
  birthday

  """column name"""
  createdAt

  """column name"""
  email

  """column name"""
  firstName

  """column name"""
  id

  """column name"""
  lastName

  """column name"""
  password

  """column name"""
  updatedAt

  """column name"""
  userName

  """column name"""
  wallet
}

"""
input type for updating data in table "Users"
"""
input Users_set_input {
  avatar: String
  bga_id: String
  bgg_id: String
  birthday: timestamptz
  createdAt: timestamptz
  email: String
  firstName: String
  id: Int
  lastName: String
  password: String
  updatedAt: timestamptz
  userName: String
  wallet: String
}

"""
Streaming cursor of the table "Users"
"""
input Users_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: Users_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input Users_stream_cursor_value_input {
  avatar: String
  bga_id: String
  bgg_id: String
  birthday: timestamptz
  createdAt: timestamptz
  email: String
  firstName: String
  id: Int
  lastName: String
  password: String
  updatedAt: timestamptz
  userName: String
  wallet: String
}

input Users_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: Users_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: Users_set_input

  """filter the rows which have to be updated"""
  where: Users_bool_exp!
}

"""ordering argument of a cursor"""
enum cursor_ordering {
  """ascending ordering of the cursor"""
  ASC

  """descending ordering of the cursor"""
  DESC
}

scalar json

"""
Boolean expression to compare columns of type "json". All fields are combined with logical 'AND'.
"""
input json_comparison_exp {
  _eq: json
  _gt: json
  _gte: json
  _in: [json!]
  _is_null: Boolean
  _lt: json
  _lte: json
  _neq: json
  _nin: [json!]
}

"""mutation root"""
type mutation_root {
  """
  delete data from the table: "Contents"
  """
  delete_Contents(
    """filter the rows which have to be deleted"""
    where: Contents_bool_exp!
  ): Contents_mutation_response

  """
  delete data from the table: "CrossBindings"
  """
  delete_CrossBindings(
    """filter the rows which have to be deleted"""
    where: CrossBindings_bool_exp!
  ): CrossBindings_mutation_response

  """
  delete data from the table: "Users"
  """
  delete_Users(
    """filter the rows which have to be deleted"""
    where: Users_bool_exp!
  ): Users_mutation_response

  """
  insert data into the table: "Contents"
  """
  insert_Contents(
    """the rows to be inserted"""
    objects: [Contents_insert_input!]!
  ): Contents_mutation_response

  """
  insert a single row into the table: "Contents"
  """
  insert_Contents_one(
    """the row to be inserted"""
    object: Contents_insert_input!
  ): Contents

  """
  insert data into the table: "CrossBindings"
  """
  insert_CrossBindings(
    """the rows to be inserted"""
    objects: [CrossBindings_insert_input!]!
  ): CrossBindings_mutation_response

  """
  insert a single row into the table: "CrossBindings"
  """
  insert_CrossBindings_one(
    """the row to be inserted"""
    object: CrossBindings_insert_input!
  ): CrossBindings

  """
  insert data into the table: "Users"
  """
  insert_Users(
    """the rows to be inserted"""
    objects: [Users_insert_input!]!
  ): Users_mutation_response

  """
  insert a single row into the table: "Users"
  """
  insert_Users_one(
    """the row to be inserted"""
    object: Users_insert_input!
  ): Users

  """
  update data of the table: "Contents"
  """
  update_Contents(
    """increments the numeric columns with given value of the filtered values"""
    _inc: Contents_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: Contents_set_input

    """filter the rows which have to be updated"""
    where: Contents_bool_exp!
  ): Contents_mutation_response

  """
  update multiples rows of table: "Contents"
  """
  update_Contents_many(
    """updates to execute, in order"""
    updates: [Contents_updates!]!
  ): [Contents_mutation_response]

  """
  update data of the table: "CrossBindings"
  """
  update_CrossBindings(
    """increments the numeric columns with given value of the filtered values"""
    _inc: CrossBindings_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: CrossBindings_set_input

    """filter the rows which have to be updated"""
    where: CrossBindings_bool_exp!
  ): CrossBindings_mutation_response

  """
  update multiples rows of table: "CrossBindings"
  """
  update_CrossBindings_many(
    """updates to execute, in order"""
    updates: [CrossBindings_updates!]!
  ): [CrossBindings_mutation_response]

  """
  update data of the table: "Users"
  """
  update_Users(
    """increments the numeric columns with given value of the filtered values"""
    _inc: Users_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: Users_set_input

    """filter the rows which have to be updated"""
    where: Users_bool_exp!
  ): Users_mutation_response

  """
  update multiples rows of table: "Users"
  """
  update_Users_many(
    """updates to execute, in order"""
    updates: [Users_updates!]!
  ): [Users_mutation_response]
}

"""column ordering options"""
enum order_by {
  """in ascending order, nulls last"""
  asc

  """in ascending order, nulls first"""
  asc_nulls_first

  """in ascending order, nulls last"""
  asc_nulls_last

  """in descending order, nulls first"""
  desc

  """in descending order, nulls first"""
  desc_nulls_first

  """in descending order, nulls last"""
  desc_nulls_last
}

type query_root {
  """
  fetch data from the table: "Contents"
  """
  Contents(
    """distinct select on columns"""
    distinct_on: [Contents_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Contents_order_by!]

    """filter the rows returned"""
    where: Contents_bool_exp
  ): [Contents!]!

  """
  fetch data from the table: "CrossBindings"
  """
  CrossBindings(
    """distinct select on columns"""
    distinct_on: [CrossBindings_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [CrossBindings_order_by!]

    """filter the rows returned"""
    where: CrossBindings_bool_exp
  ): [CrossBindings!]!

  """
  fetch data from the table: "Users"
  """
  Users(
    """distinct select on columns"""
    distinct_on: [Users_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Users_order_by!]

    """filter the rows returned"""
    where: Users_bool_exp
  ): [Users!]!
}

type subscription_root {
  """
  fetch data from the table: "Contents"
  """
  Contents(
    """distinct select on columns"""
    distinct_on: [Contents_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Contents_order_by!]

    """filter the rows returned"""
    where: Contents_bool_exp
  ): [Contents!]!

  """
  fetch data from the table in a streaming manner: "Contents"
  """
  Contents_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [Contents_stream_cursor_input]!

    """filter the rows returned"""
    where: Contents_bool_exp
  ): [Contents!]!

  """
  fetch data from the table: "CrossBindings"
  """
  CrossBindings(
    """distinct select on columns"""
    distinct_on: [CrossBindings_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [CrossBindings_order_by!]

    """filter the rows returned"""
    where: CrossBindings_bool_exp
  ): [CrossBindings!]!

  """
  fetch data from the table in a streaming manner: "CrossBindings"
  """
  CrossBindings_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [CrossBindings_stream_cursor_input]!

    """filter the rows returned"""
    where: CrossBindings_bool_exp
  ): [CrossBindings!]!

  """
  fetch data from the table: "Users"
  """
  Users(
    """distinct select on columns"""
    distinct_on: [Users_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Users_order_by!]

    """filter the rows returned"""
    where: Users_bool_exp
  ): [Users!]!

  """
  fetch data from the table in a streaming manner: "Users"
  """
  Users_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [Users_stream_cursor_input]!

    """filter the rows returned"""
    where: Users_bool_exp
  ): [Users!]!
}

scalar timestamp

"""
Boolean expression to compare columns of type "timestamp". All fields are combined with logical 'AND'.
"""
input timestamp_comparison_exp {
  _eq: timestamp
  _gt: timestamp
  _gte: timestamp
  _in: [timestamp!]
  _is_null: Boolean
  _lt: timestamp
  _lte: timestamp
  _neq: timestamp
  _nin: [timestamp!]
}

scalar timestamptz

"""
Boolean expression to compare columns of type "timestamptz". All fields are combined with logical 'AND'.
"""
input timestamptz_comparison_exp {
  _eq: timestamptz
  _gt: timestamptz
  _gte: timestamptz
  _in: [timestamptz!]
  _is_null: Boolean
  _lt: timestamptz
  _lte: timestamptz
  _neq: timestamptz
  _nin: [timestamptz!]
}
